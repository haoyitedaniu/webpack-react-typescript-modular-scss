const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const BundleAnalyzerPlugin = require("webpack-bundle-analyzer").BundleAnalyzerPlugin;
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");

const isProd = process.env.NODE_ENV === "production";
const analyzeBundle = process.env.ANALYZE === "true";

module.exports = {
  context: __dirname,
  mode: isProd ? "production" : "development",
  entry: {
    app: "./src/index.tsx"
  },
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: isProd ? "[name].[contenthash].js" : "[name].[hash].js"
    // filename: "bundle.js"
  },
  devtool: isProd ? "source-map" : "eval-source-map",
  resolve: {
    extensions: [".js", ".jsx", ".ts", ".tsx"]
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/,
        loader: "ts-loader",
        options: {
          // We use ForkTsCheckerWebpackPlugin for typechecking
          transpileOnly: true
        }
      },
      {
        // test: /\.s[ac]ss$/i,

        test: /\.s[ac]ss$/i,
        use: [
          // Creates `style` nodes from JS strings in dev and extract it to
          // another file in production
          isProd ? MiniCssExtractPlugin.loader : "style-loader",
          {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
              banner: "// autogenerated by typings-for-css-modules-loader."
            }
          },

          //Tom Long added css-customs-loader here before css-loader
          {
            loader: require.resolve("css-customs-loader"), //only works with postcss-loader@3.0.0
            options: {
              onlyLocals: false
            }
          },

          // Translates CSS into CommonJS with modules
          {
            loader: "css-loader",
            options: {
              modules: {
                mode: "local",
                localIdentName: "[name]-[local]-[hash:base64:6]"
              },
              localsConvention: "camelCase"
            }
          },

          //postcss loader
          {
            // Options for PostCSS as we reference these options twice
            // Adds vendor prefixing based on your specified browser support in
            // package.json
            loader: "postcss-loader",
            options: {
              // Necessary for external CSS imports to work
              // https://github.com/facebook/create-react-app/issues/2677
              ident: "postcss",
              plugins: () => [
                require("postcss-flexbugs-fixes"),
                require("postcss-preset-env")({
                  autoprefixer: {
                    flexbox: "no-2009"
                  },
                  features: {
                    "nesting-rules": true,
                    "custom-properties": true, // already included in stage 2+
                    "custom-media-queries": true // oooh, what's this? :)
                  },
                  stage: 3
                })
                // postcssCustomMedia({
                // 	importFrom: "src/global.css"
                // }),
                // require("postcss-custom-media"),

                // Adds PostCSS Normalize as the reset css with default options,
                // so that it honors browserslist config in package.json
                // which in turn let's users customize the target behavior as per their needs.
                //postcssNormalize()
              ]
              // sourceMap: isEnvProduction && shouldUseSourceMap
            }
          },

          // Compiles Sass to CSS
          "sass-loader"
        ]
      }
    ]
  },
  devServer: {
    contentBase: path.join(__dirname, "docs"),
    port: 9000,
    hot: true,
    historyApiFallback: true,
    overlay: true,
    stats: "minimal"
  },
  optimization: {
    splitChunks: {
      chunks: "all"
    }
  },
  plugins: [
    new webpack.WatchIgnorePlugin([/s[ac]ss\.d\.ts$/]),
    new HtmlWebpackPlugin({ template: "docs/index.html" }),
    new ForkTsCheckerWebpackPlugin({
      // For the dev server overlay to work
      async: false
    }),
    new CleanWebpackPlugin(),
    isProd ? false : new webpack.HotModuleReplacementPlugin(),
    analyzeBundle ? new BundleAnalyzerPlugin() : false,
    new MiniCssExtractPlugin({
      filename: isProd ? "[name]-[contenthash].css" : "[name].css"
    }),
    new CopyWebpackPlugin({
      patterns: [
        {
          from: "docs",
          // to: dist, //by defualt is to copy docs/* to dist/*
          globOptions: {
            ignore: ["**/index.html"] //ignore the index.html file in docs
          }
        }
      ]
    })
  ].filter(Boolean)
};
